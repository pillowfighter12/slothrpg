from monsters import enemies_copy, MonsterManager
from sloth import mainsloth 
from fight_sequence_random import fight_simulation
from text_decoration import text_decoration




def main():
    # 3. Do you want to delete a sloth?
    text_decoration.input_decorator("""Would you like to load, create, or delete a sloth?""", ["1. To load a Sloth", "2. To create a Sloth", "3. To delete a Sloth"])
    # handle the option chosen
    option = input()
    if option == "1":
        sloth = mainsloth.get_all_sloths()
        if len(sloth) == 0:
            print("No sloths found.")
        else:
            pass
            selection = input()
            sloth = mainsloth.select_sloth(selection)
            cave_entrance(sloth)
            
    if option == "2":
        # create a sloth
        sloth = mainsloth.create_sloth()
        cave_entrance(sloth)

    if option == 3:
        pass




def cave_entrance(sloth):    
    if "cave_entrance" not in sloth._location:     
        text_decoration.story_banner("-", f"""A bolt of lightning strikes a tree branch above you, causing it to snap and you find yourself falling. 
As you stumble to your feet, you notice a set of mysterious footprints 
in the damp earth. 
Your curiosity piqued, you decide to follow them, eventually leading you to the entrance of a dark and foreboding cave.""") 
        text_decoration.wait_for_any_key()           
    else:
        text_decoration.input_decorator("Would you like to explore the cave entrance some more?", ["A - To look around the entrance", "B - Go back to the Cavern"])
        user_input = ""
        if user_input != "A":
            cave_caverns(sloth)
    cave_fight(sloth, "cave_entrance")
    mainsloth.add_sloth(sloth)
    cave_caverns(sloth)


def cave_caverns(sloth):
    if "cave_cavern" not in sloth._location:     
        text_decoration.story_banner("-", f"""As you went deeper into the caverns the air continued to grow colder. The dampness of the walls sends shivers down your spine. 
The silence is broken only by the occasional sound of a small animal scurrying across the rocks""")
        text_decoration.wait_for_any_key()
        cave_fight(sloth, "cave_caverns")
        cavern_treasure(sloth)
    else:
        text_decoration.input_decorator("Would you like to explore the cave caverns some more?", ["A - To look around the caverns", "B - Go back to the Entrance"])
        user_input = input()
        if user_input != "A":
            cave_fight(sloth, "cave_caverns")
            cave_caverns(sloth)
        mainsloth.add_sloth(sloth)

        cave_entrance(sloth)


def cavern_treasure(sloth):       
    if "cave_caverns" not in sloth._location:
        sloth.add_location_visited("cave_caverns")
        text_decoration.center_message("✰✰✰✰✰ you found treasure deep in the caverns! ✰✰✰✰✰")
        sloth.add_location_visited("cave_caverns")
        sloth.change_sloth_type()
        mainsloth.add_sloth(sloth)
        cave_pit(sloth)


def cave_pit(sloth):
    text_decoration.story_banner("-", f"""You found the end of the cave but unfortunately you must fight the boss to win the game!""")
    text_decoration.wait_for_any_key()
    boss_fight(sloth, "cave_pit")
    

def cave_fight(sloth, location):
    mainsloth.reset_enemy_counter(sloth)
    monster_selection = MonsterManager(enemies_copy)  # use the copy of the enemies list
    while sloth.get_enemy_counter() < 1:
        enemy_index = monster_selection.cave_enemy_selection(location)
        enemy = monster_selection._enemies[enemy_index]["monster"]
        fight_sim = fight_simulation(enemy, sloth, enemy_index, sloth._enemy_counter)
        sloth._enemy_counter = fight_sim.time_lapse(
        monster_selection._enemies[enemy_index]["time_lapse_min_value"],
        monster_selection._enemies[enemy_index]["time_lapse_max_value"],
        monster_selection._enemies[enemy_index]["encounter_chance"],)
        sloth._inventory.inv_options(sloth)


def boss_fight(sloth, location):
    mainsloth.reset_enemy_counter(sloth)
    monster_selection = MonsterManager(enemies_copy)  # use the copy of the enemies list
    enemy_index = monster_selection.cave_enemy_selection(location)
    enemy = monster_selection._enemies[enemy_index]["boss"]
    fight_sim = fight_simulation(enemy, sloth, enemy_index, sloth._enemy_counter)
    sloth._enemy_counter = fight_sim.time_lapse(
    monster_selection._enemies[enemy_index]["time_lapse_min_value"],
    monster_selection._enemies[enemy_index]["time_lapse_max_value"],
    monster_selection._enemies[enemy_index]["encounter_chance"],)
    if sloth.get_enemy_counter() >= 1:
        print("You have won the game!")
    else:
        pass
    


    

main()

